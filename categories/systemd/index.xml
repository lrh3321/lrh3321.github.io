<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Systemd on LRH3321's 博客</title><link>https://www.lrh3321.win/categories/systemd/</link><description>Recent content in Systemd on LRH3321's 博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 16 Apr 2023 08:37:29 +0800</lastBuildDate><atom:link href="https://www.lrh3321.win/categories/systemd/index.xml" rel="self" type="application/rss+xml"/><item><title>如何编写 Systemd 服务文件</title><link>https://www.lrh3321.win/p/how-to-write-a-systemd-service/</link><pubDate>Sun, 16 Apr 2023 08:37:29 +0800</pubDate><guid>https://www.lrh3321.win/p/how-to-write-a-systemd-service/</guid><description>&lt;blockquote>
&lt;p>本教程简单的描述了如何从零开始编写一个 Systemd 服务文件、SysV init 脚本到 Systemd Service 文件的转换、以及一些后续学习的资源类内容。关于 Systemd 服务的使用，请见管理 Systemd，服务的自动启动以及服务打包问题，请见Systemd 打包指南。&lt;/p>
&lt;/blockquote>
&lt;h2 id="什么是-systemd-service">什么是 Systemd service？
&lt;/h2>&lt;p>一种以 &lt;code>.service&lt;/code> 结尾的单元（unit）配置文件，用于控制由 systemd 控制或监视的进程。简单说，用于后台以守护精灵（daemon）的形式运行程序。&lt;/p>
&lt;h2 id="编写-systemd-service">编写 Systemd service
&lt;/h2>&lt;h3 id="基本结构">基本结构
&lt;/h3>&lt;p>Systemd 服务的内容主要分为三个部分，控制单元（unit）的定义、服务（service）的定义、以及安装部分。&lt;/p>
&lt;h3 id="和-sysv-init-脚本的差异">和 SysV init 脚本的差异
&lt;/h3>&lt;p>过去，*nix 服务（守护精灵）都是用 SysV 启动脚本启动的。SysV 启动脚本就是 Bash 脚本，通常在 /etc/init.d 目录下，可以被一些标准参数如 start，stop，restart 等调用。启动该脚本通常意味着启动一个后台守护精灵（daemon）。shell 脚本常见的缺点就是，慢、可读性不强、太详细又很傲娇。虽然它们很灵活（毕竟那就是代码呀），但是有些事只用脚本做还是显得太困难了，比如安排并列执行、正确监视进程，或者配置详细执行环境。&lt;/p>
&lt;p>SysV 启动脚本还有一个硬伤就是，臃肿，重复代码太多。因为上述的“标准参数”必须要靠各个脚本来实现，而且各个脚本之间的实现都差不多（根本就是从一个 skeleton 骨架来的）。而 Systemd 则进行了统一实现，也就是说在 Systemd service 中完全就不需要、也看不到这部分内容。这使得 Systemd 服务非常简明易读，例如 NetworkManager 这一重量级程序的服务，算上注释一共才有 19 行。而它相应的 SysV 启动脚本头 100 行连标准参数都没实现完。&lt;/p>
&lt;p>Systemd 兼容 Sysv 启动脚本，这也是为什么这么久我们仍然需要一个 systemd-sysvinit 软件包的原因。但是根据以上理由，最好针对所有您安装的守护精灵都使用原生 Systemd 服务来启动。另外，Systemd 服务可无缝用于所有使用 Systemd 的发行版，意思是 Arch 下编写的脚本拿过来依然能够使用。&lt;/p>
&lt;p>通常来说，上游应该在发布源代码的同时发布 Systemd 服务，但如果没发布，你可以对照本教学来为它们写一个并贡献给它们。&lt;/p>
&lt;p>关于 SysV init 启动脚本的编写可见&lt;a class="link" href="https://zh.opensuse.org/openSUSE:Packaging_init_scripts" target="_blank" rel="noopener"
>SysVinit 引导脚本&lt;/a>，这主要用于你的服务器，毕竟服务器追求稳定软件更新的不是很勤（但你一定不知道欧盟汽车里的车载系统必须是 Systemd）。&lt;/p>
&lt;h3 id="真正开始前需要注意的问题">真正开始前需要注意的问题
&lt;/h3>&lt;p>如上所述，Systemd 的 service 文件是完全跨发行版的，所以有时候没有必要重造轮子。真正编写你的服务前，请确认它在各大发行版中完全就不存在：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://en.opensuse.org/openSUSE:Systemd_services" target="_blank" rel="noopener"
>我们的 Systemd 服务集合&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://fedoraproject.org/wiki/User:Johannbg/Features/SysVtoSystemd" target="_blank" rel="noopener"
>Fedora Systemd 服务集合&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.archlinux.org/index.php/Systemd/Services" target="_blank" rel="noopener"
>Arch Linux Systemd 服务集合&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.gentoo.org/wiki/Systemd#Services" target="_blank" rel="noopener"
>Gentoo Systemd 服务集合&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://wiki.debian.org/systemd#Debian_packages_with_native_systemd_support" target="_blank" rel="noopener"
>Debian 中的少量 Systemd 服务&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.ubuntu.com/systemd" target="_blank" rel="noopener"
>ubuntu 中的少量 Systemd 服务&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="systemd-语法">Systemd 语法
&lt;/h3>&lt;p>Systemd 语法和 .desktop 文件的语法比较像，也比较类似 Windows 下的 .ini 文件，因此无论对于打包者还是最终用户都是非常容易上手的。&lt;/p>
&lt;p>主要格式请见下面的小例子，这里需要说明三点：&lt;/p>
&lt;p>Systemd 单元文件中的以 &lt;code>#&lt;/code> 开头的行后面的内容会被认为是注释&lt;/p>
&lt;p>Systemd 下的布尔值，&lt;code>1&lt;/code>、&lt;code>yes&lt;/code>、&lt;code>on&lt;/code>、&lt;code>true&lt;/code> 都是开启，&lt;code>0&lt;/code>、&lt;code>no&lt;/code>、&lt;code>off&lt;/code>、&lt;code>false&lt;/code> 都是关闭。注：&lt;/p>
&lt;p>仅限于 Systemd 文件，比如：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">RemainOnExit&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">yes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>并不适用于该文件中嵌入的 shell 语句，比如：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-1-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">ExecStartPre&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">/usr/bin/test &amp;#34;x${NETWORKMANAGER}&amp;#34; = xyes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 &lt;code>yes&lt;/code> 就不能替换。因为等号后面是一条嵌入的 shell 语句。&lt;/p>
&lt;p>Systemd 下的时间单位默认是秒，所以要用毫秒（&lt;code>ms&lt;/code>）分钟（&lt;code>m&lt;/code>）等请显式说明。&lt;/p>
&lt;h3 id="一个小例子">一个小例子
&lt;/h3>&lt;p>NetworkManager 的 Systemd service：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-1"> 1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-2"> 2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-3"> 3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-4"> 4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-5"> 5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-6"> 6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-7">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-7"> 7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-8">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-8"> 8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-9">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-9"> 9&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-10">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-10">10&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-11">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-11">11&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-12">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-12">12&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-13">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-13">13&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-14">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-14">14&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-15">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-15">15&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-16">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-16">16&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-17">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-17">17&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-18">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-18">18&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-2-19">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-19">19&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Description&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">Network Manager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">After&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">syslog.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Wants&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">remote-fs.target network.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Type&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">dbus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">BusName&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">org.freedesktop.NetworkManager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">ExecStart&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">/usr/sbin/NetworkManager --no-daemon&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">EnvironmentFile&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">/etc/sysconfig/network/config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">ExecStartPre&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">/usr/bin/test &amp;#34;x${NETWORKMANAGER}&amp;#34; = xyes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># Suppress stderr to eliminate duplicated messages in syslog. NM calls openlog()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># with LOG_PERROR when run in foreground. But systemd redirects stderr to&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#7f848e"># syslog by default, which results in logging each message twice.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">StandardError&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">WantedBy&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">multi-user.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Also&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">NetworkManager-wait-online.service&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以下我们以编写&lt;a class="link" href="https://forum.suse.org.cn" target="_blank" rel="noopener"
>我们论坛&lt;/a>所使用的 He.net IPv6 单元文件为例。&lt;/p>
&lt;h3 id="定义控制单元-unit">定义控制单元 [Unit]
&lt;/h3>&lt;p>在 Systemd 中，所有引导过程中 Systemd 要控制的东西都是一个单元。Systemd 单元类型有：&lt;/p>
&lt;ul>
&lt;li>系统服务&lt;/li>
&lt;li>套接字（socket）&lt;/li>
&lt;li>设备&lt;/li>
&lt;li>挂载点&lt;/li>
&lt;li>自动挂载点&lt;/li>
&lt;li>SWAP 文件&lt;/li>
&lt;li>分区&lt;/li>
&lt;li>启动对象（startup target）&lt;/li>
&lt;li>文件系统路径&lt;/li>
&lt;li>定时器&lt;/li>
&lt;/ul>
&lt;p>简单说，Systemd 把 *nix 里那些分散开发因此宏观看变成一团杂碎的东西重新统一命名了。单元名就是你写的这个 .service 文件的名称。但不只有 .service 后缀的文件才可以是一个单元，单元还可以有 .target, .path 等后缀，具体可以去 &lt;code>/usr/lib/systemd/system&lt;/code> 下了解。但那种后缀要么由 Systemd 上游开发者写好随 systemd 软件包分发，要么由我们的 Base:system 团队添加，一般用户是不太需要写其它后缀的控制单元的。&lt;/p>
&lt;p>我们先要声明我们在定义控制单元：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-3-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>单元名称就不用写了，我们要写一条单元描述：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-4-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-4-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-2">2&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Description&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">Daemon to start He.net IPv6&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面我们要讲解一下 Systemd 是如何控制各个单元之间的关系的。它和 RPM 的 specfile 的依赖关系控制的语法非常相似（毕竟都是红帽一家的）：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Requires&lt;/code>: 这个单元启动了，那么它“需要”的单元也会被启动; 它“需要”的单元被停止了，它自己也活不了。但是请注意，这个设定并不能控制某单元与它“需要”的单元的启动顺序（启动顺序是另外控制的），即 Systemd 不是先启动 &lt;code>Requires&lt;/code> 再启动本单元，而是在本单元被激活时，并行启动两者。于是会产生争分夺秒的问题，如果 &lt;code>Requires&lt;/code> 先启动成功，那么皆大欢喜; 如果 &lt;code>Requires&lt;/code> 启动得慢，那本单元就会失败（Systemd 没有自动重试）。所以为了系统的健壮性，不建议使用这个标记，而建议使用 &lt;code>Wants&lt;/code> 标记。可以使用多个 &lt;code>Requires&lt;/code>。&lt;/li>
&lt;li>&lt;code>RequiresOverridable&lt;/code>: 跟 &lt;code>Requires&lt;/code> 很像。但是如果这条服务是由用户手动启动的，那么 &lt;code>RequiresOverridable&lt;/code> 后面的服务即使启动不成功也不报错。跟 &lt;code>Requires&lt;/code> 比增加了一定容错性，但是你要确定你的服务是有等待功能的。另外，如果不由用户手动启动而是随系统开机启动，那么依然会有 &lt;code>Requires&lt;/code> 面临的问题。&lt;/li>
&lt;li>&lt;code>Requisite&lt;/code>: 强势版本的 &lt;code>Requires&lt;/code>。要是这里需要的服务启动不成功，那本单元文件不管能不能检测等不能等待都立刻就会失败。&lt;/li>
&lt;li>&lt;code>Wants&lt;/code>: 推荐使用。本单元启动了，它“想要”的单元也会被启动。但是启动不成功，对本单元没有影响。&lt;/li>
&lt;li>&lt;code>Conflicts&lt;/code>: 一个单元的启动会停止与它“冲突”的单元，反之亦然。注意这里和后面的启动顺序是“正交”的：
&lt;ul>
&lt;li>两个相互冲突的单元被同时启动，要么两个都启动不了（两者都是第三个单元的 &lt;code>Requires&lt;/code>），要么启动一个（有一个是第三个单元的 &lt;code>Requires&lt;/code>，另一个不是），不是 &lt;code>Requires&lt;/code> 的那个会被停止。要是两者都不是任何一个单元的 &lt;code>Requires&lt;/code>，那么 &lt;code>Conflicts&lt;/code> 别的那个单元优先启动，被 &lt;code>Conflicts&lt;/code> 的后启动，要是互相写了，那么两个都启动不了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>OnFailure&lt;/code>：很明显，如果本单元失败了，那么启动什么单元作为折衷。&lt;/li>
&lt;/ul>
&lt;p>好了，现在我们来想象一下，我们的单元（Ipv6 隧道）应该想要什么呢？很显然是一个连通着的网络。有一个 Systemd 默认提供的对象叫做 &lt;code>network-online.target&lt;/code>（默认的 target 列表可见 &lt;a class="link" href="http://www.freedesktop.org/software/systemd/man/systemd.special.html" target="_blank" rel="noopener"
>systemd.special&lt;/a>，必看，因为你大多数时候 &lt;code>Wants&lt;/code> 的都是一个固定的系统状态而不是其它 systemd 服务），正正好好能够提供我们需要的环境。于是：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-5-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-5-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-5-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Description&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">Daemon to start He.net IPv6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Wants&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">network-online.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面我们需要定义一下服务启动顺序，不然连 / 目录所在的硬盘都没挂载就开始干活，上哪儿找程序去呀。Systemd 服务启动顺序主要使用以下两个标记定义的：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Before&lt;/code>/&lt;code>After&lt;/code>：要是一个服务 &lt;code>Before&lt;/code> 另一个服务，那么在并行启动时（Systemd 总是用进程 0 并行启动所有东西，然后通过这两个标记来二次等待排序），那另一个服务这时就会等这个服务先启动并返回状态，注意是先启动而不是启动成功，因为失败也是一种状态，一定要成功才启动另一个服务是通过依赖关系定义的。反之 &lt;code>After&lt;/code> 亦然。&lt;/li>
&lt;/ul>
&lt;p>下面说下“关机”（可以是挂起，这时候有些服务是依然在跑的，比如网络唤醒）时候的顺序：如果两个服务都是要关掉的，&lt;code>Before&lt;/code> 是先关自己，&lt;code>After&lt;/code> 是先关别人，这很好理解; 但如果一个服务是要关，而另一个是要开的，那么不管 &lt;code>Before&lt;/code>/&lt;code>After&lt;/code> 写了什么，总是优先关闭而不是开始。也就是比如服务 A Before 服务 B，但是服务 B 是在关，而服务 A 是在 &lt;code>restart&lt;/code>，那么服务 B 的顺序在服务 A 的前面。&lt;/p>
&lt;p>好啦，我们的单元应该在什么的前后启动呢？它不需要一定在什么服务前面跑起来，这不像 &lt;code>ifup&lt;/code> 和 &lt;code>dhcp&lt;/code>，网络起不来获取 &lt;code>ip&lt;/code> 肯定没用。我们只需要有网就可以了。“有网”在 Systemd 中也是由一个默认 target：&lt;code>network.target&lt;/code> 提供的，于是我们的控制单元就定义好了：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-6-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-6-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-6-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-6-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-4">4&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Description&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">Daemon to start He.net IPv6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Wants&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">network-online.target&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">After&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">network.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="定义服务本体-service">定义服务本体 [service]
&lt;/h3>&lt;p>在定义完了 Systemd 用来识别服务的单元后，我们来定义服务本体，依然是声明：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-7-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-7-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后是声明服务类型：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-8-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-8-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-8-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-8-2">2&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Type&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Systemd 支持的服务类型有以下几类：&lt;/p>
&lt;ul>
&lt;li>&lt;code>simple&lt;/code> 默认，这是最简单的服务类型。意思就是说启动的程序就是主体程序，这个程序要是退出那么一切皆休。这在图形界面里非常好理解，我打开 Amarok，退出它就没有了。但是命令行的大部分程序都不会那么设计，因为命令行的一个最基本原则就是一个好的程序不能独占命令行窗口。所以输入命令，回车，接着马上返回给你提示符，但程序已经执行了。所以只有少数程序比如 python xxx.py 还使用这种方式。在这种类型下面，如果你的主程序是要响应其它程序的，那么你的通信频道应该在启动本服务前就设好（套接字等），因此这种类型的服务，Systemd 运行它后会立刻就运行下面的服务（需要它的服务），这时没有套接字后面的服务会失败，写 &lt;code>After&lt;/code> 也没用，因为 simple 类型不存在主进程退出的情况也就不存在有返回状态的情况，所以它一旦启动就认为是成功的，除非没起来。&lt;/li>
&lt;li>&lt;code>forking&lt;/code> 标准 Unix Daemon 使用的启动方式。启动程序后会调用 fork() 函数，把必要的通信频道都设置好之后父进程退出，留下守护精灵的子进程。你要是使用的这种方式，最好也指定下 &lt;code>PIDFILE=&lt;/code>，不要让 Systemd 去猜，非要猜也可以，把 &lt;code>GuessMainPID&lt;/code> 设为 &lt;code>yes&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>判断是 &lt;code>forking&lt;/code> 还是 &lt;code>simple&lt;/code> 类型非常简单，命令行里运行下你的程序，持续占用命令行要按 Ctrl + C 才可以的，就不会是 &lt;code>forking&lt;/code> 类型。&lt;/p>
&lt;p>创建 &lt;code>PIDFILE&lt;/code> 是你为它写服务的程序的任务而不是 Systemd 的功能，甚至也不是 Sysvinit 脚本的功能。参考 &lt;a class="link" href="https://forum.suse.org.cn/viewtopic.php?f=27&amp;amp;t=914&amp;amp;sid=363447a3c2490bbc2975b0b890152c33" target="_blank" rel="noopener"
>startproc创建pid file的问题&lt;/a>了解进一步的知识。因此如果你的程序确实是 &lt;code>forking&lt;/code> 类型，但就是没实现创建 &lt;code>PIDFILE&lt;/code> 的功能，那么建议使用 &lt;code>ExecStartPost=&lt;/code> 结合 shell 命令来手动抓取进程编号并写到 &lt;code>/var/run/xxx.pid&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>&lt;code>oneshot&lt;/code> 顾名思义，打一枪换一个地方。所以这种服务类型就是启动，完成，没进程了。常见比如你设置网络，&lt;code>ifup eth0 up&lt;/code>，就是一次性的，不存在 ifup 的子进程（&lt;code>forking&lt;/code> 那样），也不存在主进程（&lt;code>simple&lt;/code> 那样），它运行完成后便了无痕迹。因为这类服务运行完就没进程了，我们经常会需要 &lt;code>RemainAfterExit=yes&lt;/code>。后面配置的意思是说，即使没进程了，我们也要 Systemd 认为该服务是存在并成功了的。所以如果你有一个这样的服务，服务启动后，你再去 &lt;code>ifup eth0 up&lt;/code>，这时你再看服务，依然显示是 &lt;code>running&lt;/code> 的。因为只要在执行那条一次性命令的时候没出错，那么它就永远认为它是成功并一直存在的，直到你关闭服务。&lt;/li>
&lt;li>&lt;code>dbus&lt;/code> 这个程序启动时需要获取一块 DBus 空间，所以需要和 &lt;code>BusName=&lt;/code> 一起用。只有它成功获得了 DBus 空间，依赖它的程序才会被启动。&lt;/li>
&lt;/ul>
&lt;p>一般人也就能用到上面四个，还有两种少见的类型：&lt;/p>
&lt;ul>
&lt;li>&lt;code>notify&lt;/code> 这个程序在启动完成后会通过 &lt;code>sd_notify&lt;/code> 发送一个通知消息。所以还需要配合 &lt;code>NotifyAccess&lt;/code> 来让 Systemd 接收消息，后者有三个级别：&lt;code>none&lt;/code>，所有消息都忽略掉; &lt;code>main&lt;/code>，只接受我们程序的主进程发过去的消息; &lt;code>all&lt;/code>，我们程序的所有进程发过去的消息都算。&lt;code>NotifyAccess&lt;/code> 要是不写的话默认是 &lt;code>main&lt;/code>。&lt;/li>
&lt;li>&lt;code>idle&lt;/code> 这个程序要等它里面调度的全部其它东西都跑完才会跑它自己。比如你 &lt;code>ExecStart&lt;/code> 的是个 shell 脚本，里面可能跑了一些别的东西，如果不这样的话，那很可能别的东西的控制台输出里会多一个“启动成功”这样的 Systemd 消息。&lt;/li>
&lt;/ul>
&lt;p>由于 &lt;code>He.net&lt;/code> 的 IPv6 是用 &lt;code>iproute2&lt;/code> 的 &lt;code>ip&lt;/code> 命令来弄的，所以是一个 &lt;code>oneshot&lt;/code> 一次性服务。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-9-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-9-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-9-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-9-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-9-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-9-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">Type&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">oneshot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">RemainAfterExit&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">yes&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来要设置 &lt;code>ExecStart&lt;/code>, &lt;code>ExecStop&lt;/code>。如果程序支持的话，你还可以去设置 &lt;code>ExecReload&lt;/code>，&lt;code>Restart&lt;/code> 等。注意，这里设置的是它们 Reload/Restart 的方式，但并不代表没有它们 Systemd 就不能完成比如 &lt;code>systemctl restart xxx.service&lt;/code> 这样的任务，程序有支持自然最好，程序不支持那就先 stop 再 start 咯。同样有特殊要求的时候你也可以去设置比如 &lt;code>ExecStartPre&lt;/code>/&lt;code>ExecStartPost&lt;/code>,&lt;code>RestartSec&lt;/code>,&lt;code>TimeoutSec&lt;/code> 等其它东西，参考链接里都有使用方法。&lt;/p>
&lt;p>这里要特殊讲一下 &lt;code>ExecStart&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>如果你服务的类型不是 &lt;code>oneshot&lt;/code>，那么它只可以接受一个命令，参数不限，比如你先 &lt;code>ip tunnel create&lt;/code> 再 &lt;code>ip tunnel0 up&lt;/code>，那是两个 &lt;code>ip&lt;/code> 命令，如果你不是 &lt;code>oneshot&lt;/code> 类型这样是不行的。&lt;/li>
&lt;li>如果有多条命令（&lt;code>oneshot&lt;/code> 类型），命令之间以分号 &lt;code>;&lt;/code> 分隔，跨行可用反斜杠 &lt;code>\&lt;/code>。&lt;/li>
&lt;li>除非你的服务类型是 &lt;code>forking&lt;/code>，否则你在这里输入的命令都会被认为是主进程，不管它是不是。&lt;/li>
&lt;/ul>
&lt;p>于是我们的 &lt;code>[Service]&lt;/code> 就写好了：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-1"> 1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-2"> 2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-3"> 3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-4"> 4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-5"> 5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-6"> 6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-7">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-7"> 7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-8">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-8"> 8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-9">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-9"> 9&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-10">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-10">10&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-11">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-11">11&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-10-12">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-12">12&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c678dd">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e06c75">Type&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">oneshot
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> RemainAfterExit=yes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> ExecStart=/usr/sbin/ip tunnel add he-ipv6 mode sit remote 66.220.18.42 local 108.170.7.158 ttl 255 ; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> /usr/sbin/ip link set he-ipv6 up ; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> /usr/sbin/ip addr add 2001:470:c:1184::2/64 dev he-ipv6 ; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> /usr/sbin/ip route add ::/0 dev he-ipv6 ; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> /usr/sbin/ip -6 addr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> ExecStop=/usr/sbin/ip route delete ::/0 dev he-ipv6 ; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> /usr/sbin/ip -6 addr del 2001:470:c:1184::2/64 dev he-ipv6 ; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> /usr/sbin/ip link set he-ipv6 down ; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#98c379"> /usr/sbin/ip tunnel del he-ipv6&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="安装服务-install">安装服务 [install]
&lt;/h3>&lt;p>这可能有点绕，我服务文件都弄好了，放到 &lt;code>/etc/systemd/system&lt;/code>（供系统管理员和用户使用），&lt;code>/usr/lib/systemd/system&lt;/code>（供发行版打包者使用）了，不就是安装好了嘛。&lt;/p>
&lt;p>这里说的是一种内部状态，默认你放对位置它显示的是 &lt;code>disabled&lt;/code>，&lt;code>unloaded&lt;/code>，所以我们要在 Systemd 内部对它进行一下 load，没人要的东西是不需要安装的（我们不收渣渣），所以我们要告诉 Systemd 它是有人要的，被谁要。一般都是被&lt;/p>
&lt;div class="highlight">&lt;div style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-11-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-11-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f" id="hl-11-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-11-2">2&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ini" data-lang="ini">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e06c75">WantedBy&lt;/span>&lt;span style="color:#56b6c2">=&lt;/span>&lt;span style="color:#98c379">multi-user.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要（&lt;code>multi-user.target&lt;/code> 表示多用户系统好了，简单理解就是你可以登入了）。这样在 &lt;code>multi-user.target&lt;/code> 启用时，我们的服务也就会被启用了。&lt;/p>
&lt;p>[Install] 部分下除了 &lt;code>WantedBy&lt;/code> 还有两种属性，分别是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Alias=&lt;/code> 给你自己的别名，这样 &lt;code>systemctl command xxx.service&lt;/code> 的时候就可以不输入完整的单元名称。比如你给 &lt;code>NetworkManager&lt;/code> 一个别名叫 &lt;code>Alias=nm&lt;/code>，那你就可以 &lt;code>systemctl status nm.service&lt;/code> 查看实际是 &lt;code>NetworkManager.service&lt;/code> 的服务了。&lt;/li>
&lt;li>&lt;code>Also=&lt;/code> 安装本服务的时候还要安装别的什么服务。比如我们的 &lt;code>He.net&lt;/code> 脚本按理应该需要一个 &lt;code>iproute2.service&lt;/code> 作为 also，但是 &lt;code>iproute2&lt;/code> 实际上不需要 systemd 控制，所以就没写。它和 [Unit] 定义里面的依赖关系相比，它管理的不是运行时依赖，而是安装时。安装好了之后启动谁先谁后，谁依赖谁，和 &lt;code>Also=&lt;/code> 都没有关系。&lt;/li>
&lt;/ul>
&lt;h2 id="参考文献">参考文献
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="http://www.freedesktop.org/software/systemd/man/systemd.service.html" target="_blank" rel="noopener"
>systemd.service 手册页&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html" target="_blank" rel="noopener"
>systemd.unit 手册页&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.freedesktop.org/software/systemd/man/systemd.special.html" target="_blank" rel="noopener"
>systemd.special 手册页&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://0pointer.de/blog/projects/systemd-for-admins-3.html" target="_blank" rel="noopener"
>Systemd 作者 Lennart 博客连载的“给系统管理员的 Systemd 教学之三”&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="作者">作者
&lt;/h2>&lt;p>&lt;a class="link" href="https://zh.opensuse.org/User:MargueriteSu" target="_blank" rel="noopener"
>MargueriteSu&lt;/a>&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zh.opensuse.org/openSUSE:How_to_write_a_systemd_service" target="_blank" rel="noopener"
>openSUSE:How to write a systemd service&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.archlinux.org/title/System" target="_blank" rel="noopener"
>systemd - ArchWiki&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://wiki.archlinux.org/title/Systemd/Timers" target="_blank" rel="noopener"
>systemd/Timers - ArchWiki&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>